"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3232],{7897:(_,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var i=n(4848),e=n(8453);const a={},r=void 0,p={id:"maya/programming/example/rigging/lips_weight_rig",title:"lips_weight_rig",description:"",source:"@site/docs/maya/programming/example/rigging/lips_weight_rig.md",sourceDirName:"maya/programming/example/rigging",slug:"/maya/programming/example/rigging/lips_weight_rig",permalink:"/docs/maya/programming/example/rigging/lips_weight_rig",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/maya/programming/example/rigging/lips_weight_rig.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Directly Apply Delta Blendshape",permalink:"/docs/maya/programming/example/rigging/directly_apply_delta_bshape"},next:{title:"selective_copy_weight",permalink:"/docs/maya/programming/example/rigging/selective_copy_weight"}},o={},s=[];function g(_){const t={code:"code",pre:"pre",...(0,e.R)(),..._.components};return(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import pymel.core as pm\n\n\n'''\n# Define the parent and children variables\nparent_a = 'FKJaw_M'\nparent_b = 'FKHead_M'\n# children = ['lip_top_R_00_jaw_offset_jnt_grp', 'lip_top_R_01_jaw_offset_jnt_grp', 'lip_top_R_02_jaw_offset_jnt_grp', 'lip_top_R_03_jaw_offset_jnt_grp', 'lip_top_R_04_jaw_offset_jnt_grp', 'lip_top_M_jaw_offset_jnt_grp']\n\n\nchildren = ['lip_side_R_jaw_offset_jnt_grp', 'lip_bot_R_00_jaw_offset_jnt_grp', 'lip_bot_R_01_jaw_offset_jnt_grp', 'lip_bot_R_02_jaw_offset_jnt_grp', 'lip_bot_R_03_jaw_offset_jnt_grp', 'lip_bot_R_04_jaw_offset_jnt_grp', 'lip_bot_R_05_jaw_offset_jnt_grp', 'lip_bot_M_jnt_offset_grp']\n\n# Initialize the initial weights\nweight_a = 0.5\nweight_b = 0.5\n\n# Loop through each child\nfor i, child in enumerate(children):\n    # Create the parent constraint with maintain offset\n    constraint = pm.parentConstraint(parent_a, parent_b, child, maintainOffset=True)\n\n\n    # Clamp the weights to be within the range of 0 to 1\n    clamped_weight_a = min(max(weight_a, 0), 1)\n    clamped_weight_b = min(max(weight_b, 0), 1)\n    \n    # Set the weights for the parent constraint\n    constraintWeightAttrA = constraint.getWeightAliasList()[0]\n    constraintWeightAttrB = constraint.getWeightAliasList()[1]\n    \n    constraintWeightAttrA.set(clamped_weight_a)\n    constraintWeightAttrB.set(clamped_weight_b)\n    \n    # Print the constraint and the weights (for debugging purposes)\n\n\n    print(f'Constraint: {constraint}, {constraintWeightAttrA}: {clamped_weight_a}, {constraintWeightAttrB}: {clamped_weight_b}')\n    \n    # Update the weights for the next child\n    weight_a += 0.08\n    weight_b -= 0.08\n    \n    print (weight_a, weight_b)\n'''\n\ndef weighted_parent_child_constraint (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list):\n\n\n    weight_a = initial_weight_a\n    weight_b = initial_weight_b\n\n    for i, child in enumerate(children_list):\n        constraint = pm.parentConstraint(parent_a, parent_b, child, maintainOffset=True)\n\n\n        # Clamp the weights to be within the range of 0 to 1\n        clamped_weight_a = min(max(weight_a, 0), 1)\n        clamped_weight_b = min(max(weight_b, 0), 1)\n        \n        # Set the weights for the parent constraint\n        constraintWeightAttrA = constraint.getWeightAliasList()[0]\n        constraintWeightAttrB = constraint.getWeightAliasList()[1]\n        \n        constraintWeightAttrA.set(clamped_weight_a)\n        constraintWeightAttrB.set(clamped_weight_b)\n        \n        # Print the constraint and the weights (for debugging purposes)\n\n\n        # print(f'Constraint: {constraint}, {constraintWeightAttrA}: {clamped_weight_a}, {constraintWeightAttrB}: {clamped_weight_b}')\n        \n        # Update the weights for the next child\n        weight_a += increment\n        weight_b -= increment\n        \n\nparent_a = 'FKJaw_M'\nparent_b = 'FKHead_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = ['lip_side_R_jaw_offset_jnt_grp', 'lip_bot_R_00_jaw_offset_jnt_grp', 'lip_bot_R_01_jaw_offset_jnt_grp', 'lip_bot_R_02_jaw_offset_jnt_grp', 'lip_bot_R_03_jaw_offset_jnt_grp', 'lip_bot_R_04_jaw_offset_jnt_grp', 'lip_bot_R_05_jaw_offset_jnt_grp', 'lip_bot_M_jnt_offset_grp']\n\n\nchildren_list = ['lip_side_R_jaw_offset_jnt_grp', 'lip_bot_R_00_jaw_offset_jnt_grp', 'lip_bot_R_01_jaw_offset_jnt_grp', 'lip_bot_R_02_jaw_offset_jnt_grp', 'lip_bot_R_03_jaw_offset_jnt_grp', 'lip_bot_R_04_jaw_offset_jnt_grp', 'lip_bot_R_05_jaw_offset_jnt_grp', 'lip_bot_M_jnt_offset_grp']\n\n\n#weighted_parent_child_constraint(parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\nparent_a = 'FKJaw_M'\nparent_b = 'FKHead_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\n\nchildren_list = ['lip_side_L_jaw_offset_jnt_grp', 'lip_bot_L_00_jaw_offset_jnt_grp', 'lip_bot_L_01_jaw_offset_jnt_grp', 'lip_bot_L_02_jaw_offset_jnt_grp', 'lip_bot_L_03_jaw_offset_jnt_grp', 'lip_bot_L_04_jaw_offset_jnt_grp', 'lip_bot_L_05_jaw_offset_jnt_grp']\n\n\n#weighted_parent_child_constraint(parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\nparent_a = 'FKHead_M'\nparent_b = 'FKJaw_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nchildren_list = ['lip_top_R_00_jaw_offset_jnt_grp', 'lip_top_R_01_jaw_offset_jnt_grp', 'lip_top_R_02_jaw_offset_jnt_grp', 'lip_top_R_03_jaw_offset_jnt_grp', 'lip_top_R_04_jaw_offset_jnt_grp', 'lip_top_M_jnt_offset_grp']\n\n#weighted_parent_child_constraint(parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\nparent_a = 'FKHead_M'\nparent_b = 'FKJaw_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nchildren_list = ['lip_top_L_00_jaw_offset_jnt_grp', 'lip_top_L_01_jaw_offset_jnt_grp', 'lip_top_L_02_jaw_offset_jnt_grp', 'lip_top_L_03_jaw_offset_jnt_grp', 'lip_top_L_04_jaw_offset_jnt_grp', 'lip_top_M_jnt_offset_grp']\n\n#weighted_parent_child_constraint(parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\n\ndef weighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list):\n\n\n\n\n    # weight_a = initial_weight_a\n    # weight_b = initial_weight_b\n\n    for i, (child, weight) in enumerate(children_list):\n        constraint = pm.parentConstraint(parent_a, parent_b, child, maintainOffset=True)\n        constraint.interpType.set(2)\n\n\n        # Clamp the weights to be within the range of 0 to 1\n        # clamped_weight_a = min(max(weight_a, 0), 1)\n        # clamped_weight_b = min(max(weight_b, 0), 1)\n        \n        # Set the weights for the parent constraint\n        constraintWeightAttrA = constraint.getWeightAliasList()[0]\n        constraintWeightAttrB = constraint.getWeightAliasList()[1]\n        \n        weight_a = weight\n        weight_b = 1 - weight\n        constraintWeightAttrA.set(weight_a)\n        constraintWeightAttrB.set(weight_b)\n        \n        # Print the constraint and the weights (for debugging purposes)\n\n\n        # print(f'Constraint: {constraint}, {constraintWeightAttrA}: {weight_a}, {constraintWeightAttrB}: {weight_b}')\n        \n        # Update the weights for the next child\n        weight_a += increment\n        weight_b -= increment\n\n\n\n\n\nparent_a = 'FKJaw_M'\nparent_b = 'lip_side_R_con'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = [\n('lip_side_R_jaw_offset_jnt_grp', 0.5),\n('lip_bot_R_00_jaw_offset_jnt_grp', 0.5),\n('lip_bot_R_01_jaw_offset_jnt_grp', 0.7),\n('lip_bot_R_02_jaw_offset_jnt_grp', 0.8),\n('lip_bot_R_03_jaw_offset_jnt_grp', 0.88),\n('lip_bot_R_04_jaw_offset_jnt_grp', 0.95),\n('lip_bot_R_05_jaw_offset_jnt_grp', 1.0),\n('lip_bot_M_jaw_offset_jnt_grp', 1.0),\n]\n\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\nparent_a = 'FKJaw_M'\nparent_b = 'lip_side_L_con'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = [\n('lip_side_L_jaw_offset_jnt_grp', 0.5),\n('lip_bot_L_00_jaw_offset_jnt_grp', 0.5),\n('lip_bot_L_01_jaw_offset_jnt_grp', 0.7),\n('lip_bot_L_02_jaw_offset_jnt_grp', 0.8),\n('lip_bot_L_03_jaw_offset_jnt_grp', 0.88),\n('lip_bot_L_04_jaw_offset_jnt_grp', 0.95),\n('lip_bot_L_05_jaw_offset_jnt_grp', 1.0),\n]\n\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\nparent_a = 'lip_side_R_con'\nparent_b = 'FKJaw_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = [\n('lip_top_R_00_jaw_offset_jnt_grp', 0.5),\n('lip_top_R_01_jaw_offset_jnt_grp', 0.7),\n('lip_top_R_02_jaw_offset_jnt_grp', 0.8),\n('lip_top_R_03_jaw_offset_jnt_grp', 0.9),\n('lip_top_R_04_jaw_offset_jnt_grp', 0.95),\n('lip_top_M_jaw_offset_jnt_grp', 0.98),\n]\n\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\nparent_a = 'lip_side_L_con'\nparent_b = 'FKJaw_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = [\n('lip_top_L_00_jaw_offset_jnt_grp', 0.5),\n('lip_top_L_01_jaw_offset_jnt_grp', 0.7),\n('lip_top_L_02_jaw_offset_jnt_grp', 0.8),\n('lip_top_L_03_jaw_offset_jnt_grp', 0.9),\n('lip_top_L_04_jaw_offset_jnt_grp', 0.95),\n]\n\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\n'''\n\n# CONNECTION FOR SMILE AND FROWN\n\nparent_a = 'lip_side_R_con'\nparent_b = 'FKHead_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = [\n('lip_side_R_side_offset_jnt_grp', 1.0),\n('lip_bot_R_00_side_offset_jnt_grp', 1.0),\n('lip_bot_R_01_side_offset_jnt_grp', 0.8),\n('lip_bot_R_02_side_offset_jnt_grp', 0.7),\n('lip_bot_R_03_side_offset_jnt_grp', 0.5),\n('lip_bot_R_04_side_offset_jnt_grp', 0.2),\n('lip_bot_R_05_side_offset_jnt_grp', 0.05),\n('lip_bot_M_side_offset_jnt_grp', 0.0),\n]\n\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\nparent_a = 'lip_side_R_con'\nparent_b = 'FKHead_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\n\n\nchildren_list = [\n('lip_top_R_00_side_offset_jnt_grp', 1.0),\n('lip_top_R_01_side_offset_jnt_grp', 0.7),\n('lip_top_R_02_side_offset_jnt_grp', 0.5),\n('lip_top_R_03_side_offset_jnt_grp', 0.25),\n('lip_top_R_04_side_offset_jnt_grp', 0.05),\n('lip_top_M_side_offset_jnt_grp', 0.0),\n]\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\nparent_a = 'lip_side_L_con'\nparent_b = 'FKHead_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\nchildren_list = [\n('lip_side_L_side_offset_jnt_grp', 1.0),\n('lip_bot_L_00_side_offset_jnt_grp', 1.0),\n('lip_bot_L_01_side_offset_jnt_grp', 0.8),\n('lip_bot_L_02_side_offset_jnt_grp', 0.7),\n('lip_bot_L_03_side_offset_jnt_grp', 0.5),\n('lip_bot_L_04_side_offset_jnt_grp', 0.2),\n('lip_bot_L_05_side_offset_jnt_grp', 0.05),\n]\n\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n\n\nparent_a = 'lip_side_L_con'\nparent_b = 'FKHead_M'\ninitial_weight_a = 0.5\ninitial_weight_b = 0.5\nincrement = 0.1\n\n\nchildren_list = [\n('lip_top_L_00_side_offset_jnt_grp', 1.0),\n('lip_top_L_01_side_offset_jnt_grp', 0.7),\n('lip_top_L_02_side_offset_jnt_grp', 0.5),\n('lip_top_L_03_side_offset_jnt_grp', 0.25),\n('lip_top_L_04_side_offset_jnt_grp', 0.05),\n]\n\nweighted_parent_child_constraint_MOD (parent_a, parent_b, initial_weight_a, initial_weight_b, increment, children_list)\n'''\n"})})}function l(_={}){const{wrapper:t}={...(0,e.R)(),..._.components};return t?(0,i.jsx)(t,{..._,children:(0,i.jsx)(g,{..._})}):g(_)}},8453:(_,t,n)=>{n.d(t,{R:()=>r,x:()=>p});var i=n(6540);const e={},a=i.createContext(e);function r(_){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof _?_(t):{...t,..._}}),[t,_])}function p(_){let t;return t=_.disableParentContext?"function"==typeof _.components?_.components(e):_.components||e:r(_.components),i.createElement(a.Provider,{value:t},_.children)}}}]);