"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3729],{2777:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=r(4848),t=r(8453);const i={},s="3DS to Maya Layers",o={id:"maya/programming/example/3ds_to_maya_layers",title:"3DS to Maya Layers",description:"Previously, 3DS Python Script to JSON external file but 3DS revised their API (i.e. removed the MaxPlus library). So workflow is:",source:"@site/docs/maya/programming/example/3ds_to_maya_layers.md",sourceDirName:"maya/programming/example",slug:"/maya/programming/example/3ds_to_maya_layers",permalink:"/docs/maya/programming/example/3ds_to_maya_layers",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/maya/programming/example/3ds_to_maya_layers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cmds",permalink:"/docs/maya/programming/cmds"},next:{title:"bake_tranform_to_parent_offset_matrix",permalink:"/docs/maya/programming/example/bake_tranform_to_parent_offset_matrix"}},l={},m=[];function c(n){const e={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"3ds-to-maya-layers",children:"3DS to Maya Layers"}),"\n",(0,a.jsx)(e.p,{children:"Previously, 3DS Python Script to JSON external file but 3DS revised their API (i.e. removed the MaxPlus library). So workflow is:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"exporting FBX."}),"\n",(0,a.jsx)(e.li,{children:"importing FBX to Maya. The layers info are retained."}),"\n",(0,a.jsx)(e.li,{children:"importing FBX to C4D. The layers info are NOT retained."}),"\n",(0,a.jsx)(e.li,{children:"Rebuild the Layers Info to a Grouping in the Outliner."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# CREATE GROUPING FROM LAYERS\nimport pymel.core as pm\n\ndef create_groups_for_display_layers():\n    # Get all display layers in the scene\n    display_layers = pm.ls(type='displayLayer')\n    \n    # Filter out the default display layer (named 'defaultLayer')\n    display_layers = [layer for layer in display_layers if layer != pm.PyNode('defaultLayer')]\n    \n    # Create a group for each display layer and parent its members\n    for layer in display_layers:\n        # Create a group with a name similar to the display layer\n        group_name = layer.name() + \"_grp\"\n        if not pm.objExists(group_name):\n            pm.group(em=True, name=group_name)\n            print(f\"Created group: {group_name}\")\n        \n        # Get members of the display layer\n        members = layer.listMembers()\n        \n        if members:\n            # Parent members to the corresponding group\n            for member in members:\n                pm.parent(member, group_name)\n            print(f\"Parented members of {layer} to {group_name}\")\n\n# Run the function\ncreate_groups_for_display_layers()\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"# REMOVE PREFIX\nimport pymel.core as pm\n\ndef rename_objects_with_prefix():\n    # Define the prefix to remove\n    prefix = \"female_anatomy_20240522_\"\n    \n    # Get all objects in the scene\n    all_objects = pm.ls()\n    \n    # Loop through each object and check if it has the specified prefix\n    for obj in all_objects:\n        if obj.name().startswith(prefix):\n            # Get the new name by removing the prefix\n            new_name = obj.name()[len(prefix):]\n            \n            print(new_name)\n            print(obj.name())\n            obj.rename(new_name)\n            #break  # Note: The 'break' statement will stop the loop after the first rename\n\n# Run the function\nrename_objects_with_prefix()\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# SIMPLE REPLACE OF ASCII\nimport pymel.core as pm\n\ndef replace_string_in_object_names(old_string, new_string):\n    # Define the string to be replaced and the replacement string\n\n    \n    # Get all objects in the scene\n    all_objects = pm.ls()\n    \n    # Loop through each object and replace the string in its name\n    for obj in all_objects:\n        old_name = obj.name()\n        if old_string in old_name:\n            new_name = old_name.replace(old_string, new_string)\n            obj.rename(new_name)\n            print(f"Renamed {old_name} to {new_name}")\n\ndirty_string_list = ["FBXASC032", "FBXASC045", "FBXASC040XIFBXASC041", "FBXASC040", "FBXASC041", "__", " "]\n\nfor dirty_string in dirty_string_list:\n\treplace_string_in_object_names(dirty_string, "__")\n\n\n# Run the function\nold_string = "FBXASC032"\nnew_string = "_"\nreplace_string_in_object_names(old_string, new_string)\n\nold_string = "FBXASC045"\nnew_string = "_"\nreplace_string_in_object_names(old_string, new_string)\n\nold_string = "FBXASC040XIFBXASC041"\nnew_string = "_"\nreplace_string_in_object_names(old_string, new_string)\n\nold_string = "FBXASC040"\nnew_string = "_"\nreplace_string_in_object_names(old_string, new_string)\n\nold_string = "FBXASC041"\nnew_string = "_"\nreplace_string_in_object_names(old_string, new_string)\n\nold_string = "__"\nnew_string = "_"\nreplace_string_in_object_names(old_string, new_string)\n\ndirty_string_list = ["FBXASC032", "FBXASC045", "FBXASC040XIFBXASC041", "FBXASC040", "FBXASC041", "__", " "]\n\nfor dirty_string in dirty_string_list:\n\treplace_string_in_object_names(dirty_string, "__")\n\n\ndef string_cleanup(string_to_process):\n    # Define the string to be replaced and the replacement string\n\n    \n\n\n    # Get all objects in the scene\n    all_objects = pm.ls()\n    \n    # Loop through each object and replace the string in its name\n    for obj in all_objects:\n        old_name = obj.name()\n\n        for dirty_string in dirty_string_list:\n            if dirty_string in old_name:\n                new_name = old_name.strip().replace(dirty_string, "_")\n                obj.rename(new_name)\n\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import maya.cmds as cmds\nimport json\n\n# The JSON data (you can replace this with a file read if needed)\njson_data = \'\'\'\n[\n    {\n        "name": "sciepro_female_anatomy",\n        "children": [\n            {\n                "name": "Urinary_System",\n                "children": []\n            },\n            {\n                "name": "Membranous_Labyrinth",\n                "children": []\n            },\n            {\n                "name": "Mucous_Membranes",\n                "children": []\n            },\n            {\n                "name": "Female_Body",\n                "children": [\n                    {\n                        "name": "Eye_Anatomy",\n                        "children": []\n                    },\n                    {\n                        "name": "Integumentary_System",\n                        "children": [\n                            {\n                                "name": "hair_femaleOriginal",\n                                "children": []\n                            },\n                            {\n                                "name": "hair_femaleGlobal",\n                                "children": []\n                            },\n                            {\n                                "name": "hair_femaleBodyVariant",\n                                "children": []\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n\'\'\'\n\n# Function to create the hierarchy\ndef create_hierarchy(parent, data):\n    for item in data:\n        # Create an empty group (null object)\n        name = None\n        \n        if cmds.objExists(item["name"])\n            name = item["name"]\n\n        else:\n            null = cmds.group(empty=True, name=item["name"])\n        \n        # Parent the null object to the parent if a parent is provided\n        if parent:\n            cmds.parent(null, parent)\n        \n        # Recursively add children\n        if "children" in item and item["children"]:\n            create_hierarchy(null, item["children"])\n\n# Main function\ndef main():\n    # Parse the JSON data\n    #data = json.loads(json_data)\n    param_path = r"C:/users/BT/Desktop/layers_hierarchy.json"\n    with open(param_path, "r") as read_file:\n        data = json.load(read_file)    \n\n    # Create the hierarchy\n    create_hierarchy(None, data)\n\n# Run the main function\nmain()\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import maya.cmds as cmds\nimport json\n\n# Function to check if an object with the given name already exists under the specified parent\ndef check_existing_child(parent, name):\n    children = cmds.listRelatives(parent, children=True, fullPath=True) or []\n    for child in children:\n        if cmds.nodeType(child) == \'transform\' and cmds.ls(child, shortNames=True)[0] == name:\n            return True\n    return False\n    \n\n# Function to create the hierarchy\ndef create_hierarchy(parent_obj, data):\n    for item in data:\n        \n        # Check if the object already exists under the parent\n        if parent_obj and check_existing_child(parent_obj, item["name"]):\n            continue\n\n        # Create an empty group (null object)\n        null = cmds.group(empty=True, name=item["name"])\n        \n        # Parent the null object to the parent if a parent is provided\n        if parent_obj:\n            cmds.parent(null, parent_obj)\n        \n        # Recursively add children\n        if "children" in item and item["children"]:\n            create_hierarchy(null, item["children"])\n\n# Main function\ndef main():\n    # Parse the JSON data\n    #data = json.loads(json_data)\n    param_path = r"C:/users/BT/Desktop/layers_hierarchy.json"\n    with open(param_path, "r") as read_file:\n        data = json.load(read_file)    \n\n    # Create the hierarchy\n    create_hierarchy(None, data)\n\n# Run the main function\nmain()\n'})})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>o});var a=r(6540);const t={},i=a.createContext(t);function s(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);