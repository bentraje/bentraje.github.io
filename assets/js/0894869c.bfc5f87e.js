"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9098],{4525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=n(4848),a=n(8453);const s={},i="Houdini Groups to Maya Sets",r={id:"maya/log/houdini_groups_to_maya_sets",title:"Houdini Groups to Maya Sets",description:"I need identiy points of a mouth geo that are near the teeth geo.",source:"@site/docs/maya/log/houdini_groups_to_maya_sets.md",sourceDirName:"maya/log",slug:"/maya/log/houdini_groups_to_maya_sets",permalink:"/docs/maya/log/houdini_groups_to_maya_sets",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/maya/log/houdini_groups_to_maya_sets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Get the Largest Piece",permalink:"/docs/maya/log/get_the_largest_piece"},next:{title:"Programming",permalink:"/docs/maya/programming/"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"houdini-groups-to-maya-sets",children:"Houdini Groups to Maya Sets"}),"\n",(0,o.jsx)(t.p,{children:"I need identiy points of a mouth geo that are near the teeth geo.\nCan't do it reliably and progmatrically in Maya, so ended up doing it in Houdini.\nThe problem is Houdini Groups does not seem to be carried over to Maya Sets."}),"\n",(0,o.jsx)(t.p,{children:"So I had to create scripts to export the data from Houdini and import the data in Maya"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Houdini Python\nimport hou\nimport json\nimport os\n\n# Get the current node\nnode = hou.pwd()\n\n# Get the detail attribute named "tag"\ngeo = node.geometry()\ntag_value = geo.attribValue("tag")\n\n# Get the path of the Houdini file\nhip_file = hou.hipFile.name()\n\n# Construct the path for the JSON file in the same directory\njson_file_path = os.path.splitext(hip_file)[0] + "_tag_value.json"\n\n# Save tag_value in JSON format\nwith open(json_file_path, \'w\') as json_file:\n    json.dump({"tag_value": tag_value}, json_file, indent=4)\n\nprint("Tag value saved in JSON format:", tag_value)\n\n'})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Maya Python\n# Import Data from Houdini \n\nimport maya.cmds as cmds\nimport os\nimport json\n\n# Load the JSON file\njson_file_path = r"C:\\Users\\BT\\Documents\\projects\\work\\2024\\09_dianne_void_eel\\houdini\\delete_small_parts_tag_value.json"  # Replace this with the actual path\nwith open(json_file_path, \'r\') as json_file:\n    data = json.load(json_file)\n\n# Retrieve tag_value from JSON data\n\n#print (data)\ntag_value = data["tag_value"]\n\nprint (tag_value)\n\nselection_set_name = "houdini_selection_set"\ncmds.select(clear=True)\nfor vtx_index in tag_value:\n    print (type(vtx_index))\n    vtx_name = "body_low_wip.vtx[%d]" % vtx_index  # Assuming pPlane1 is the name of your mesh\n    #print (vtx_name, type(vtx_name))\n    #cmds.select("body_low_wip.vtx[11323]", add=True)\n    cmds.select(vtx_name, add=True)    \n\ncmds.sets(name=selection_set_name, forceElement=True) # gives an error. create a new set yet. \n\n'})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Create Rivets from the Sets\n# Create Joints and Controls from the Rivets\n# The sets contain point selection\n\n# TO DO. \n# Rename some joints. to the teeth\nimport maya.cmds as cmds\n\n# Access specific selection set members\nselected_objects = cmds.sets(\'houdini_selection_set\', q=True)\nrivet_list = []\n\n\n# Create the Rivets\nfor p in selected_objects:\n   cmds.select(clear=True)\n   cmds.select(p, add=True)\n   cmds.Rivet()\n   constraint = cmds.ls(sl=True)\n   rivet_list.append(constraint)\n      \n# Create the Joints and Controls\n#circle_ref = cmds.circle()[0] # returns [\'nurbsCircle1\', \'makeNurbCircle1\']\ncircle_ref = \'box_ref\'\n\n\nfor riv in rivet_list:\n    cmds.select(clear=True)\n    grp = cmds.group(em=True)\n    start_joint = cmds.joint() # automatic parent because riv joint is alreadyselected\n    end_joint = cmds.joint() # automatic parent because riv joint is alreadyselected\n    loc_obj = riv[1]\n    cmds.setAttr(loc_obj + ".localScaleX", 0.05)\n    cmds.setAttr(loc_obj + ".localScaleY", 0.05)\n    cmds.setAttr(loc_obj + ".localScaleZ", 0.05)        \n    con = cmds.parentConstraint(loc_obj, grp, mo=False)\n    cmds.delete(con)\n    con = cmds.parentConstraint(loc_obj, start_joint, mo=False)\n    cmds.delete(con)\n    con = cmds.parentConstraint(loc_obj, end_joint, mo=False)    \n    cmds.delete(con)\n    cmds.setAttr(end_joint + ".tx", 0.2)\n    con = cmds.parentConstraint(loc_obj, grp, mo=True)\n\n    # PARENT SHAPE CONTROLS\n    circle_duplicate = cmds.duplicate(circle_ref) \n    shape_nodes = cmds.listRelatives(circle_duplicate, shapes=True)[0]\n    rename_shape_node = start_joint + "_name" # Too dirty. Joint01, Joint02\n    cmds.rename(shape_nodes, rename_shape_node) \n    cmds.parent(rename_shape_node, start_joint, relative=True, shape=True)  \n    cmds.delete(circle_duplicate)\n        \n#cmds.delete(circle_ref)\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(6540);const a={},s=o.createContext(a);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);