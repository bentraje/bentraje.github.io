"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9356],{6209:(n,t,_)=>{_.r(t),_.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>m});var e=_(4848),o=_(8453);const r={},i=void 0,c={id:"maya/programming/example/rigging/connnect_joints_to_control",title:"connnect_joints_to_control",description:"",source:"@site/docs/maya/programming/example/rigging/connnect_joints_to_control.md",sourceDirName:"maya/programming/example/rigging",slug:"/maya/programming/example/rigging/connnect_joints_to_control",permalink:"/docs/maya/programming/example/rigging/connnect_joints_to_control",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/maya/programming/example/rigging/connnect_joints_to_control.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Batch Constraint Joint to Controls",permalink:"/docs/maya/programming/example/rigging/batch_constraint_joint_to_controls"},next:{title:"Copy Joint Orientation",permalink:"/docs/maya/programming/example/rigging/copy_joint_orientation_to_other"}},a={},m=[];function s(n){const t={code:"code",pre:"pre",...(0,o.R)(),...n.components};return(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-python",children:"import pymel.core as pm \nimport maya.cmds as cmds\n\n\nbase_jnt = [\n'root_jnt', 'body_jnt',\n'neck_jnt', 'neck_piece_main_jnt', 'neck_piece_L_00_jnt', 'neck_piece_R_00_jnt', 'neck_piece_C_00_jnt',\n'head_jnt', 'jaw_jnt',\n'shoulder_deform_L_jnt','pauldron_main_L_jnt', 'pauldron_A_L_00_jnt', 'pauldron_B_L_00_jnt', \n'elbow_deform_L_jnt', 'hand_deform_L_jnt',\n\n'shoulder_deform_R_jnt','pauldron_main_R_jnt', 'pauldron_A_R_00_jnt', 'pauldron_B_R_00_jnt', \n'elbow_deform_R_jnt', 'hand_deform_R_jnt',\n\n'shoulder_FK_L_jnt', 'elbow_FK_L_jnt', 'hand_FK_L_jnt',\n'shoulder_FK_R_jnt', 'elbow_FK_R_jnt', 'hand_FK_R_jnt',\n]\n\n\ndef connect_joints_con():\n\n    for base in base_jnt:\n        base_obj = pm.PyNode(base)\n        if not base_obj: print (f\"{base_obj.getName()} does not exist\")\n        \n        con_name = base_obj.getName().replace(\"_jnt\", \"_con\")\n        con_obj = pm.PyNode(con_name)\n        if not con_obj: print (f\"{con_obj.getName()} does not exist\")\n\n        orient_constr   = pm.orientConstraint(con_obj, base_obj, mo=True)\n        point_constr    = pm.pointConstraint(con_obj, base_obj, mo=True)\n        scale_constr    = pm.scaleConstraint(con_obj, base_obj, mo=True)\n\ndef setup_ik_fk_switch(main_chain, fk_chain, ik_chain, switch_ctrl, arm_ctrl, pole_ctrl):\n\n    ik_handle, effector = pm.ikHandle(startJoint=ik_chain[0], endEffector=ik_chain[-1], solver=\"ikRPsolver\", name=ik_chain[0] + \"_ikHandle\")\n    pm.rename(effector, ik_chain[-1] + \"_eff\")\n    pm.parent(ik_handle, arm_ctrl)\n    pm.poleVectorConstraint(pole_ctrl, ik_handle)\n    pm.parentConstraint(main_chain[-1], switch_ctrl + \"_grp\")\n    \n    pm.orientConstraint(arm_ctrl, ik_chain[-1], mo=True)\n\n    switch_ctrl = pm.PyNode(switch_ctrl)    \n\n    # Constrain the main joints to the FK and IK joints\n    for main_jnt, fk_jnt, ik_jnt in zip(main_chain, fk_chain, ik_chain):\n        main_jnt = pm.PyNode(main_jnt)\n        fk_jnt = pm.PyNode(fk_jnt)\n        ik_jnt = pm.PyNode(ik_jnt)\n        switch_ctrl = pm.PyNode(switch_ctrl)\n        arm_ctrl = pm.PyNode(arm_ctrl)\n        pole_ctrl = pm.PyNode(pole_ctrl)\n\n        if not pm.isConnected(switch_ctrl.FKIKSwitch, arm_ctrl.visibility):\n            pm.connectAttr(switch_ctrl.FKIKSwitch, arm_ctrl.visibility)\n\n        if not pm.isConnected(switch_ctrl.FKIKSwitch, pole_ctrl.visibility):\n            pm.connectAttr(switch_ctrl.FKIKSwitch, pole_ctrl.visibility)\n        \n        orient_constr = pm.orientConstraint(fk_jnt, ik_jnt, main_jnt)\n        pm.connectAttr(switch_ctrl.FKIKSwitch, orient_constr.attr(ik_jnt.nodeName() + \"W1\"))\n        rev_node = pm.createNode(\"reverse\", name=main_jnt.nodeName() + \"_ikFkRev\")\n        pm.connectAttr(switch_ctrl.FKIKSwitch, rev_node + \".inputX\")\n        pm.connectAttr(rev_node + \".outputX\", orient_constr.attr(fk_jnt.nodeName() + \"W0\"))\n        \n        fk_con_name = fk_jnt.getName().replace(\"_jnt\", \"_con\")\n        fk_con_obj = pm.PyNode(fk_con_name)\n        pm.connectAttr(rev_node + \".outputX\", fk_con_obj.visibility)\n\n        orient_constr = pm.pointConstraint(fk_jnt, ik_jnt, main_jnt)\n        pm.connectAttr(switch_ctrl.FKIKSwitch, orient_constr.attr(ik_jnt.nodeName() + \"W1\"))\n        rev_node = pm.createNode(\"reverse\", name=main_jnt.nodeName() + \"_ikFkRev\")\n        pm.connectAttr(switch_ctrl.FKIKSwitch, rev_node + \".inputX\")\n        pm.connectAttr(rev_node + \".outputX\", orient_constr.attr(fk_jnt.nodeName() + \"W0\"))\n\n        orient_constr = pm.scaleConstraint(fk_jnt, ik_jnt, main_jnt)\n        pm.connectAttr(switch_ctrl.FKIKSwitch, orient_constr.attr(ik_jnt.nodeName() + \"W1\"))\n        rev_node = pm.createNode(\"reverse\", name=main_jnt.nodeName() + \"_ikFkRev\")\n        pm.connectAttr(switch_ctrl.FKIKSwitch, rev_node + \".inputX\")\n        pm.connectAttr(rev_node + \".outputX\", orient_constr.attr(fk_jnt.nodeName() + \"W0\"))\n\n\nconnect_joints_con()\n\nmain_joints = ['shoulder_deform_L_con_grp', 'elbow_deform_L_con_grp', 'hand_deform_L_con_grp']\nfk_joints = ['shoulder_FK_L_jnt', 'elbow_FK_L_jnt', 'hand_FK_L_jnt']\nik_joints = ['shoulder_IK_L_jnt', 'elbow_IK_L_jnt', 'hand_IK_L_jnt']\nswitch_ctrl = 'arm_IKFK_L_switch_con'\narm_ctrl = 'arm_IK_L_con' \npole_ctrl = 'arm_pole_L_con'\nsetup_ik_fk_switch(main_joints, fk_joints, ik_joints, switch_ctrl, arm_ctrl, pole_ctrl)\n\n\nmain_joints = ['shoulder_deform_R_con_grp', 'elbow_deform_R_con_grp', 'hand_deform_R_con_grp']\nfk_joints = ['shoulder_FK_R_jnt', 'elbow_FK_R_jnt', 'hand_FK_R_jnt']\nik_joints = ['shoulder_IK_R_jnt', 'elbow_IK_R_jnt', 'hand_IK_R_jnt']\nswitch_ctrl = 'arm_IKFK_R_switch_con'\narm_ctrl = 'arm_IK_R_con' \npole_ctrl = 'arm_pole_R_con'\nsetup_ik_fk_switch(main_joints, fk_joints, ik_joints, switch_ctrl, arm_ctrl, pole_ctrl)\n\n\n"})})}function l(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(s,{...n})}):s(n)}},8453:(n,t,_)=>{_.d(t,{R:()=>i,x:()=>c});var e=_(6540);const o={},r=e.createContext(o);function i(n){const t=e.useContext(r);return e.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),e.createElement(r.Provider,{value:t},n.children)}}}]);